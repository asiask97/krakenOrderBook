{"version":3,"sources":["../node_modules/bintrees/lib/treebase.js","../node_modules/bintrees/lib/rbtree.js","../node_modules/bintrees/lib/bintree.js","../node_modules/bintrees/index.js","js/script.js"],"names":["BST","require","RBTree","ws","WebSocket","product_id","chart","limit","chartBids","document","getElementById","chartAsks","asks","a","b","key","bids","onopen","console","log","setTimeout","request_messageTwo","send","JSON","stringify","onmessage","message","data","parse","event","Object","values","arrasks","arrbids","forEach","askitem","price","parseFloat","vol","insert","value","biditem","displayBids","displayAsks","update_book","tree","side","remove","findkey","find","sort","volume","toDisplayPrice","toDisaplyVolume","length","max","it","iterator","item","next","push","prev","start","i","Math","floor","added","y","updateChartBids","updateChartAsks","chartbids","labels","datasets","update","chartasks","Chart","type","label","borderWidth","backgroundColor","options","normalized","animation","duration","min","ticks","stepSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA,IAAIA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBC,MAA9B,EAEA;;;AACAC,EAAE,GAAG,IAAIC,SAAJ,CAAc,gCAAd,CAAL;AACA,IAAMC,UAAU,GAAG,WAAnB;AACA,IAAIC,KAAJ;AACA,IAAMC,KAAK,GAAG,EAAd;AACA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAlB;AACA,IAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAlB;AAEA,IAAIE,IAAI,GAAI,IAAIZ,GAAJ,CAAQ,UAASa,CAAT,EAAYC,CAAZ,EAAe;EAAE,OAAOD,CAAC,CAACE,GAAF,GAAQD,CAAC,CAACC,GAAjB;AAAuB,CAAhD,CAAZ;AACA,IAAIC,IAAI,GAAI,IAAIhB,GAAJ,CAAQ,UAASa,CAAT,EAAYC,CAAZ,EAAe;EAAE,OAAOD,CAAC,CAACE,GAAF,GAAQD,CAAC,CAACC,GAAjB;AAAuB,CAAhD,CAAZ,EAEA;;AACAZ,EAAE,CAACc,MAAH,GAAY,YAAM;EACdC,OAAO,CAACC,GAAR,CAAY,gCAA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","file":"script.dcb8a9fb.js","sourceRoot":"../src","sourcesContent":["\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function(item) {\n    var cur = this._root;\n    var iter = this.iterator();\n    var cmp = this._comparator;\n\n    while(cur !== null) {\n        var c = cmp(item, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c > 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i >= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(item, cur.data) < 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function(item) {\n    var iter = this.lowerBound(item);\n    var cmp = this._comparator;\n\n    while(iter.data() !== null && cmp(iter.data(), item) === 0) {\n        iter.next();\n    }\n\n    return iter;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node's data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) && is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) && is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp < 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp > 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) && !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null && node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction BinTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nBinTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nBinTree.prototype.insert = function(data) {\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        this.size++;\n        return true;\n    }\n\n    var dir = 0;\n\n    // setup\n    var p = null; // parent\n    var node = this._root;\n\n    // search down\n    while(true) {\n        if(node === null) {\n            // insert new node at the bottom\n            node = new Node(data);\n            p.set_child(dir, node);\n            ret = true;\n            this.size++;\n            return true;\n        }\n\n        // stop if found\n        if(this._comparator(node.data, data) === 0) {\n            return false;\n        }\n\n        dir = this._comparator(node.data, data) < 0;\n\n        // update helpers\n        p = node;\n        node = node.get_child(dir);\n    }\n};\n\n// returns true if removed, false if not found\nBinTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        p = node;\n        node = node.get_child(dir);\n        var cmp = this._comparator(data, node.data);\n        dir = cmp > 0;\n\n        if(cmp === 0) {\n            found = node;\n        }\n    }\n\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n\n        this._root = head.right;\n        this.size--;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nmodule.exports = BinTree;\n\n","module.exports = {\n    RBTree: require('./lib/rbtree'),\n    BinTree: require('./lib/bintree')\n};\n","//var BST = require('binarysearch-tree')\n//import BST from \"red-black-tree-js\"\nvar BST = require('bintrees').RBTree;\n\n//variables\nws = new WebSocket('wss://futures.kraken.com/ws/v1')\nconst product_id = \"PI_ETHUSD\"\nlet chart;\nconst limit = 50;\nconst chartBids = document.getElementById('chartBids');\nconst chartAsks = document.getElementById('chartAsks');\n\nlet asks  = new BST(function(a, b) { return a.key - b.key; });\nlet bids  = new BST(function(a, b) { return a.key - b.key; });\n\n//connect \nws.onopen = () => {\n    console.log('Trade WS with Kraken connected')\n    \n    setTimeout(function(){\n        let request_messageTwo = {\n            \"event\": \"subscribe\",\n            \"feed\": 'book',\n            \"product_ids\": [product_id]\n        }\n        ws.send(JSON.stringify(request_messageTwo))\n        //console.log(JSON.stringify(request_messageTwo))\n    }, 3000);\n\n}\n\n//get messages\nws.onmessage = (message) => {\n    let data = JSON.parse(message.data)\n    //console.log(data)\n    //console.log(Object.keys(data))\n    //Object.keys(data)[4]\n    if (!data.event) {\n\n        if (Object.values(data)[0] == 'book_snapshot') {\n            let arrasks = Object.values(data)[6];\n            let arrbids = Object.values(data)[5];\n\n            arrasks.forEach((askitem) =>{\n                let price = parseFloat(Object.values(askitem)[0])\n                let vol = parseFloat(Object.values(askitem)[1])\n                asks.insert({key:price, value:vol})\n            })\n\n            arrbids.forEach((biditem) =>{\n                let price = parseFloat(Object.values(biditem)[0])\n                let vol = parseFloat(Object.values(biditem)[1])\n                bids.insert({key:price, value:vol})\n            })\n\n            console.log('Initialised Book');\n            //console.log(asks, bids);\n\n            if(!chart){\n                displayBids()\n                displayAsks()\n                console.log('charts disaplyed')\n            }\n\n        } else {\n            if(Object.values(data)[2] == 'sell' ) {\n               update_book(asks, 'ask', data);\n            }\n            if (Object.values(data)[2] == 'buy' ) {\n                update_book(bids, 'bid', data);\n            }\n        }\n    }\n}\n\n\n\n// Updating Orderbook\nfunction update_book (tree, side, data) {\n       \n    //console.log(data)\n    //delete entry if its volume is 0\n    //console.log(side, tree.find(parseFloat(Object.values(data)[4])), parseFloat(Object.values(data)[4]))\n\n    if(Object.values(data)[5] == 0){\n       tree.remove({key: parseFloat(Object.values(data)[4])}); \n    }else{\n        // add/update\n        //if node exits\n       let findkey = tree.find({key :parseFloat(Object.values(data)[4])})\n        if(findkey){\n            tree.remove({key: parseFloat(Object.values(data)[4])}); \n            tree.insert({key: parseFloat(Object.values(data)[4]), value:parseFloat(Object.values(data)[5])})\n        }else{\n            //if it doesnt exit then just insert it\n            tree.insert({key: parseFloat(Object.values(data)[4]), value:parseFloat(Object.values(data)[5])})\n        }\n\n        //console.log('updated');\n    }\n    \n    sort(tree, side)\n   \n    //console.log(price.slice(0,limit), volume.slice(0,limit))\n\n\n}\nlet price = []\nlet volume = []\nlet toDisplayPrice = []\nlet toDisaplyVolume = []\nfunction sort(tree, side){\n\n   // let arr = tree.toArrayPreOrder()\n    \n   \n    price.length = 0; \n    toDisplayPrice.length = 0;\n    volume.length = 0\n    toDisaplyVolume.length  = 0;\n    let max = 0;\n    if(side == 'ask'){\n        var it=tree.iterator(), item;\n        while((item = it.next()) !== null) {\n            price.push(item.key)\n            volume.push(item.value)\n            max++;\n            if(max == limit){\n                break;\n            }\n        }\n    }else{\n        var it=tree.iterator(), item;\n        while((item = it.prev()) !== null) {\n            price.push(item.key)\n            volume.push(item.value)\n            max++;\n            if(max == limit){\n                break;\n            }\n        }\n    }\n    //console.log(price, volume)\n\n    let start = price[0]; \n    toDisplayPrice.push(price[0]);\n    toDisaplyVolume.push(volume[0]);\n\n    for(let i = 1; i <= limit; i++ ){\n        if(side == 'ask'){\n            start = start + 0.05;\n        }\n        else{\n            start = start - 0.05;\n        }\n        \n        start = Math.floor(start * 100) / 100.0\n        let added = false\n        //console.log('helo')\n       /* if(start == price[i]){\n            toDisplayPrice.push(price[i]);\n            toDisaplyVolume.push(volume[i]);\n        }*/\n        for(let y=0; y <= price.length; y++){\n            if(start == price[y]){\n                toDisplayPrice.push(price[y]);\n                toDisaplyVolume.push(volume[y]);\n                added = true\n            }\n        }\n        if(!added){\n            toDisplayPrice.push(start);\n            toDisaplyVolume.push(0);\n        }\n    }\n    //console.log(toDisplayPrice, toDisaplyVolume)\n    if(side == 'bid') updateChartBids()                                      \n    else if(side == 'ask'){\n        //console.log(price, volume, toDisplayPrice, toDisaplyVolume)\n        updateChartAsks()\n    } \n}\n\nfunction updateChartBids(){\n    chartbids.data.labels = toDisplayPrice;\n    chartbids.data.datasets[0].data = toDisaplyVolume;\n    chartbids.update()\n    //console.log('update')\n}\nfunction updateChartAsks(){\n    chartasks.data.labels = toDisplayPrice;\n    chartasks.data.datasets[0].data = toDisaplyVolume;\n    chartasks.update()\n}\n\n\nfunction displayBids(){\n    sort(bids, 'bids')\n    chartbids = new Chart(chartBids, {\n        type: 'bar',\n        data: {\n            labels: toDisplayPrice,\n            datasets: [{\n                label: 'order size',\n                data: toDisaplyVolume,\n                borderWidth: 1,\n                backgroundColor: ['rgb(255,0,0)']\n            }]\n        },\n        options: {\n            normalized: true,\n            animation: {\n                duration: 0\n            },\n            y:\n             {\n                min: 0,\n                max: 200000,\n                ticks:{\n                   stepSize: 10000\n                }\n            },\n        }   \n    });\n}\n\nfunction displayAsks(){\n    sort(asks, 'asks')\n    chartasks = new Chart(chartAsks, {\n        type: 'bar',\n        data: {\n            labels: toDisplayPrice,\n            datasets: [{\n                label: 'order size',\n                data: toDisaplyVolume,\n                borderWidth: 1,\n                backgroundColor: ['rgb(0,255,0)']\n            }]\n        },\n        options: {\n            normalized: true,\n            animation: {\n                duration: 0\n            },\n            y:\n             {\n                min: 0,\n                max: 200000,\n                ticks:{\n                   stepSize: 10000\n                }\n            },\n        }   \n    });\n}\n\n//challenge function for private requests\n/*function signin_challenge(message){\n    \n    // step 1: hash the message with SHA256\n    var hash = CryptoJS.SHA256(message);\n\n    // step 2: base64 decode api secret key\n    const secret_buffer = CryptoJS.enc.Base64.parse(api_secret);\n\n    // step 3: use result of step 2 to hash the result of step 1 with HMAC-SHA512\n    const hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA512, secret_buffer);\n    hmac.update(hash, secret_buffer);\n    \n    // step 4: Base64-encode the result of step 3\n    let result = hmac.finalize().toString(CryptoJS.enc.Base64);\n    return result;\n}*/\n"]}