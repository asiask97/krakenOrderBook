{"mappings":"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","sources":["node_modules/bintrees/lib/rbtree.js","node_modules/bintrees/lib/treebase.js","node_modules/bintrees/lib/bintree.js","node_modules/bintrees/index.js","src/js/script.js"],"sourcesContent":["\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction RBTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nRBTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nRBTree.prototype.insert = function(data) {\n    var ret = false;\n\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        ret = true;\n        this.size++;\n    }\n    else {\n        var head = new Node(undefined); // fake tree root\n\n        var dir = 0;\n        var last = 0;\n\n        // setup\n        var gp = null; // grandparent\n        var ggp = head; // grand-grand-parent\n        var p = null; // parent\n        var node = this._root;\n        ggp.right = this._root;\n\n        // search down\n        while(true) {\n            if(node === null) {\n                // insert new node at the bottom\n                node = new Node(data);\n                p.set_child(dir, node);\n                ret = true;\n                this.size++;\n            }\n            else if(is_red(node.left) && is_red(node.right)) {\n                // color flip\n                node.red = true;\n                node.left.red = false;\n                node.right.red = false;\n            }\n\n            // fix red violation\n            if(is_red(node) && is_red(p)) {\n                var dir2 = ggp.right === gp;\n\n                if(node === p.get_child(last)) {\n                    ggp.set_child(dir2, single_rotate(gp, !last));\n                }\n                else {\n                    ggp.set_child(dir2, double_rotate(gp, !last));\n                }\n            }\n\n            var cmp = this._comparator(node.data, data);\n\n            // stop if found\n            if(cmp === 0) {\n                break;\n            }\n\n            last = dir;\n            dir = cmp < 0;\n\n            // update helpers\n            if(gp !== null) {\n                ggp = gp;\n            }\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n        }\n\n        // update root\n        this._root = head.right;\n    }\n\n    // make root black\n    this._root.red = false;\n\n    return ret;\n};\n\n// returns true if removed, false if not found\nRBTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var gp = null; // grand parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        var last = dir;\n\n        // update helpers\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n\n        var cmp = this._comparator(data, node.data);\n\n        dir = cmp > 0;\n\n        // save found node\n        if(cmp === 0) {\n            found = node;\n        }\n\n        // push the red node down\n        if(!is_red(node) && !is_red(node.get_child(dir))) {\n            if(is_red(node.get_child(!dir))) {\n                var sr = single_rotate(node, dir);\n                p.set_child(last, sr);\n                p = sr;\n            }\n            else if(!is_red(node.get_child(!dir))) {\n                var sibling = p.get_child(!last);\n                if(sibling !== null) {\n                    if(!is_red(sibling.get_child(!last)) && !is_red(sibling.get_child(last))) {\n                        // color flip\n                        p.red = false;\n                        sibling.red = true;\n                        node.red = true;\n                    }\n                    else {\n                        var dir2 = gp.right === p;\n\n                        if(is_red(sibling.get_child(last))) {\n                            gp.set_child(dir2, double_rotate(p, last));\n                        }\n                        else if(is_red(sibling.get_child(!last))) {\n                            gp.set_child(dir2, single_rotate(p, last));\n                        }\n\n                        // ensure correct coloring\n                        var gpc = gp.get_child(dir2);\n                        gpc.red = true;\n                        node.red = true;\n                        gpc.left.red = false;\n                        gpc.right.red = false;\n                    }\n                }\n            }\n        }\n    }\n\n    // replace and remove if found\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n        this.size--;\n    }\n\n    // update root and make it black\n    this._root = head.right;\n    if(this._root !== null) {\n        this._root.red = false;\n    }\n\n    return found !== null;\n};\n\nfunction is_red(node) {\n    return node !== null && node.red;\n}\n\nfunction single_rotate(root, dir) {\n    var save = root.get_child(!dir);\n\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n\n    root.red = true;\n    save.red = false;\n\n    return save;\n}\n\nfunction double_rotate(root, dir) {\n    root.set_child(!dir, single_rotate(root.get_child(!dir), !dir));\n    return single_rotate(root, dir);\n}\n\nmodule.exports = RBTree;\n","\nfunction TreeBase() {}\n\n// removes all nodes from the tree\nTreeBase.prototype.clear = function() {\n    this._root = null;\n    this.size = 0;\n};\n\n// returns node data if found, null otherwise\nTreeBase.prototype.find = function(data) {\n    var res = this._root;\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            return res.data;\n        }\n        else {\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// returns iterator to node if found, null otherwise\nTreeBase.prototype.findIter = function(data) {\n    var res = this._root;\n    var iter = this.iterator();\n\n    while(res !== null) {\n        var c = this._comparator(data, res.data);\n        if(c === 0) {\n            iter._cursor = res;\n            return iter;\n        }\n        else {\n            iter._ancestors.push(res);\n            res = res.get_child(c > 0);\n        }\n    }\n\n    return null;\n};\n\n// Returns an iterator to the tree node at or immediately after the item\nTreeBase.prototype.lowerBound = function(item) {\n    var cur = this._root;\n    var iter = this.iterator();\n    var cmp = this._comparator;\n\n    while(cur !== null) {\n        var c = cmp(item, cur.data);\n        if(c === 0) {\n            iter._cursor = cur;\n            return iter;\n        }\n        iter._ancestors.push(cur);\n        cur = cur.get_child(c > 0);\n    }\n\n    for(var i=iter._ancestors.length - 1; i >= 0; --i) {\n        cur = iter._ancestors[i];\n        if(cmp(item, cur.data) < 0) {\n            iter._cursor = cur;\n            iter._ancestors.length = i;\n            return iter;\n        }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n};\n\n// Returns an iterator to the tree node immediately after the item\nTreeBase.prototype.upperBound = function(item) {\n    var iter = this.lowerBound(item);\n    var cmp = this._comparator;\n\n    while(iter.data() !== null && cmp(iter.data(), item) === 0) {\n        iter.next();\n    }\n\n    return iter;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.min = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.left !== null) {\n        res = res.left;\n    }\n\n    return res.data;\n};\n\n// returns null if tree is empty\nTreeBase.prototype.max = function() {\n    var res = this._root;\n    if(res === null) {\n        return null;\n    }\n\n    while(res.right !== null) {\n        res = res.right;\n    }\n\n    return res.data;\n};\n\n// returns a null iterator\n// call next() or prev() to point to an element\nTreeBase.prototype.iterator = function() {\n    return new Iterator(this);\n};\n\n// calls cb on each node's data, in order\nTreeBase.prototype.each = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.next()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n// calls cb on each node's data, in reverse order\nTreeBase.prototype.reach = function(cb) {\n    var it=this.iterator(), data;\n    while((data = it.prev()) !== null) {\n        if(cb(data) === false) {\n            return;\n        }\n    }\n};\n\n\nfunction Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n}\n\nIterator.prototype.data = function() {\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns first node\n// otherwise, returns next node\nIterator.prototype.next = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._minNode(root);\n        }\n    }\n    else {\n        if(this._cursor.right === null) {\n            // no greater node in subtree, go up to parent\n            // if coming from a right child, continue up the stack\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.right === save);\n        }\n        else {\n            // get the next node from the subtree\n            this._ancestors.push(this._cursor);\n            this._minNode(this._cursor.right);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\n// if null-iterator, returns last node\n// otherwise, returns previous node\nIterator.prototype.prev = function() {\n    if(this._cursor === null) {\n        var root = this._tree._root;\n        if(root !== null) {\n            this._maxNode(root);\n        }\n    }\n    else {\n        if(this._cursor.left === null) {\n            var save;\n            do {\n                save = this._cursor;\n                if(this._ancestors.length) {\n                    this._cursor = this._ancestors.pop();\n                }\n                else {\n                    this._cursor = null;\n                    break;\n                }\n            } while(this._cursor.left === save);\n        }\n        else {\n            this._ancestors.push(this._cursor);\n            this._maxNode(this._cursor.left);\n        }\n    }\n    return this._cursor !== null ? this._cursor.data : null;\n};\n\nIterator.prototype._minNode = function(start) {\n    while(start.left !== null) {\n        this._ancestors.push(start);\n        start = start.left;\n    }\n    this._cursor = start;\n};\n\nIterator.prototype._maxNode = function(start) {\n    while(start.right !== null) {\n        this._ancestors.push(start);\n        start = start.right;\n    }\n    this._cursor = start;\n};\n\nmodule.exports = TreeBase;\n\n","\nvar TreeBase = require('./treebase');\n\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\nNode.prototype.get_child = function(dir) {\n    return dir ? this.right : this.left;\n};\n\nNode.prototype.set_child = function(dir, val) {\n    if(dir) {\n        this.right = val;\n    }\n    else {\n        this.left = val;\n    }\n};\n\nfunction BinTree(comparator) {\n    this._root = null;\n    this._comparator = comparator;\n    this.size = 0;\n}\n\nBinTree.prototype = new TreeBase();\n\n// returns true if inserted, false if duplicate\nBinTree.prototype.insert = function(data) {\n    if(this._root === null) {\n        // empty tree\n        this._root = new Node(data);\n        this.size++;\n        return true;\n    }\n\n    var dir = 0;\n\n    // setup\n    var p = null; // parent\n    var node = this._root;\n\n    // search down\n    while(true) {\n        if(node === null) {\n            // insert new node at the bottom\n            node = new Node(data);\n            p.set_child(dir, node);\n            ret = true;\n            this.size++;\n            return true;\n        }\n\n        // stop if found\n        if(this._comparator(node.data, data) === 0) {\n            return false;\n        }\n\n        dir = this._comparator(node.data, data) < 0;\n\n        // update helpers\n        p = node;\n        node = node.get_child(dir);\n    }\n};\n\n// returns true if removed, false if not found\nBinTree.prototype.remove = function(data) {\n    if(this._root === null) {\n        return false;\n    }\n\n    var head = new Node(undefined); // fake tree root\n    var node = head;\n    node.right = this._root;\n    var p = null; // parent\n    var found = null; // found item\n    var dir = 1;\n\n    while(node.get_child(dir) !== null) {\n        p = node;\n        node = node.get_child(dir);\n        var cmp = this._comparator(data, node.data);\n        dir = cmp > 0;\n\n        if(cmp === 0) {\n            found = node;\n        }\n    }\n\n    if(found !== null) {\n        found.data = node.data;\n        p.set_child(p.right === node, node.get_child(node.left === null));\n\n        this._root = head.right;\n        this.size--;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nmodule.exports = BinTree;\n\n","module.exports = {\n    RBTree: require('./lib/rbtree'),\n    BinTree: require('./lib/bintree')\n};\n","//var BST = require('binarysearch-tree')\n//import BST from \"red-black-tree-js\"\nvar BST = require('bintrees').RBTree;\n\n//variables\nws = new WebSocket('wss://futures.kraken.com/ws/v1')\nconst product_id = \"PI_ETHUSD\"\nlet chart;\nconst limit = 50;\nconst chartBids = document.getElementById('chartBids');\nconst chartAsks = document.getElementById('chartAsks');\n\nlet asks  = new BST(function(a, b) { return a.key - b.key; });\nlet bids  = new BST(function(a, b) { return a.key - b.key; });\n\n//connect \nws.onopen = () => {\n    console.log('Trade WS with Kraken connected')\n    \n    setTimeout(function(){\n        let request_messageTwo = {\n            \"event\": \"subscribe\",\n            \"feed\": 'book',\n            \"product_ids\": [product_id]\n        }\n        ws.send(JSON.stringify(request_messageTwo))\n        //console.log(JSON.stringify(request_messageTwo))\n    }, 3000);\n\n}\n\n//get messages\nws.onmessage = (message) => {\n    let data = JSON.parse(message.data)\n    //console.log(data)\n    //console.log(Object.keys(data))\n    //Object.keys(data)[4]\n    if (!data.event) {\n\n        if (Object.values(data)[0] == 'book_snapshot') {\n            let arrasks = Object.values(data)[6];\n            let arrbids = Object.values(data)[5];\n\n            arrasks.forEach((askitem) =>{\n                let price = parseFloat(Object.values(askitem)[0])\n                let vol = parseFloat(Object.values(askitem)[1])\n                asks.insert({key:price, value:vol})\n            })\n\n            arrbids.forEach((biditem) =>{\n                let price = parseFloat(Object.values(biditem)[0])\n                let vol = parseFloat(Object.values(biditem)[1])\n                bids.insert({key:price, value:vol})\n            })\n\n            console.log('Initialised Book');\n            //console.log(asks, bids);\n\n            if(!chart){\n                displayBids()\n                displayAsks()\n                console.log('charts disaplyed')\n            }\n\n        } else {\n            if(Object.values(data)[2] == 'sell' ) {\n               update_book(asks, 'ask', data);\n            }\n            if (Object.values(data)[2] == 'buy' ) {\n                update_book(bids, 'bid', data);\n            }\n        }\n    }\n}\n\n\n\n// Updating Orderbook\nfunction update_book (tree, side, data) {\n       \n    //console.log(data)\n    //delete entry if its volume is 0\n    //console.log(side, tree.find(parseFloat(Object.values(data)[4])), parseFloat(Object.values(data)[4]))\n\n    if(Object.values(data)[5] == 0){\n       tree.remove({key: parseFloat(Object.values(data)[4])}); \n    }else{\n        // add/update\n        //if node exits\n       let findkey = tree.find({key :parseFloat(Object.values(data)[4])})\n        if(findkey){\n            tree.remove({key: parseFloat(Object.values(data)[4])}); \n            tree.insert({key: parseFloat(Object.values(data)[4]), value:parseFloat(Object.values(data)[5])})\n        }else{\n            //if it doesnt exit then just insert it\n            tree.insert({key: parseFloat(Object.values(data)[4]), value:parseFloat(Object.values(data)[5])})\n        }\n\n        //console.log('updated');\n    }\n    \n    sort(tree, side)\n   \n    //console.log(price.slice(0,limit), volume.slice(0,limit))\n\n\n}\nlet price = []\nlet volume = []\nlet toDisplayPrice = []\nlet toDisaplyVolume = []\nfunction sort(tree, side){\n\n   // let arr = tree.toArrayPreOrder()\n    \n   \n    price.length = 0; \n    toDisplayPrice.length = 0;\n    volume.length = 0\n    toDisaplyVolume.length  = 0;\n    let max = 0;\n    if(side == 'ask'){\n        var it=tree.iterator(), item;\n        while((item = it.next()) !== null) {\n            price.push(item.key)\n            volume.push(item.value)\n            max++;\n            if(max == limit){\n                break;\n            }\n        }\n    }else{\n        var it=tree.iterator(), item;\n        while((item = it.prev()) !== null) {\n            price.push(item.key)\n            volume.push(item.value)\n            max++;\n            if(max == limit){\n                break;\n            }\n        }\n    }\n    //console.log(price, volume)\n\n    let start = price[0]; \n    toDisplayPrice.push(price[0]);\n    toDisaplyVolume.push(volume[0]);\n\n    for(let i = 1; i <= limit; i++ ){\n        if(side == 'ask'){\n            start = start + 0.05;\n        }\n        else{\n            start = start - 0.05;\n        }\n        \n        start = Math.floor(start * 100) / 100.0\n        let added = false\n        //console.log('helo')\n       /* if(start == price[i]){\n            toDisplayPrice.push(price[i]);\n            toDisaplyVolume.push(volume[i]);\n        }*/\n        for(let y=0; y <= price.length; y++){\n            if(start == price[y]){\n                toDisplayPrice.push(price[y]);\n                toDisaplyVolume.push(volume[y]);\n                added = true\n            }\n        }\n        if(!added){\n            toDisplayPrice.push(start);\n            toDisaplyVolume.push(0);\n        }\n    }\n    //console.log(toDisplayPrice, toDisaplyVolume)\n    if(side == 'bid') updateChartBids()                                      \n    else if(side == 'ask'){\n        //console.log(price, volume, toDisplayPrice, toDisaplyVolume)\n        updateChartAsks()\n    } \n}\n\nfunction updateChartBids(){\n    chartbids.data.labels = toDisplayPrice;\n    chartbids.data.datasets[0].data = toDisaplyVolume;\n    chartbids.update()\n    //console.log('update')\n}\nfunction updateChartAsks(){\n    chartasks.data.labels = toDisplayPrice;\n    chartasks.data.datasets[0].data = toDisaplyVolume;\n    chartasks.update()\n}\n\n\nfunction displayBids(){\n    sort(bids, 'bids')\n    chartbids = new Chart(chartBids, {\n        type: 'bar',\n        data: {\n            labels: toDisplayPrice,\n            datasets: [{\n                label: 'order size',\n                data: toDisaplyVolume,\n                borderWidth: 1,\n                backgroundColor: ['rgb(255,0,0)']\n            }]\n        },\n        options: {\n            normalized: true,\n            animation: {\n                duration: 0\n            },\n            y:\n             {\n                min: 0,\n                max: 200000,\n                ticks:{\n                   stepSize: 10000\n                }\n            },\n        }   \n    });\n}\n\nfunction displayAsks(){\n    sort(asks, 'asks')\n    chartasks = new Chart(chartAsks, {\n        type: 'bar',\n        data: {\n            labels: toDisplayPrice,\n            datasets: [{\n                label: 'order size',\n                data: toDisaplyVolume,\n                borderWidth: 1,\n                backgroundColor: ['rgb(0,255,0)']\n            }]\n        },\n        options: {\n            normalized: true,\n            animation: {\n                duration: 0\n            },\n            y:\n             {\n                min: 0,\n                max: 200000,\n                ticks:{\n                   stepSize: 10000\n                }\n            },\n        }   \n    });\n}\n\n//challenge function for private requests\n/*function signin_challenge(message){\n    \n    // step 1: hash the message with SHA256\n    var hash = CryptoJS.SHA256(message);\n\n    // step 2: base64 decode api secret key\n    const secret_buffer = CryptoJS.enc.Base64.parse(api_secret);\n\n    // step 3: use result of step 2 to hash the result of step 1 with HMAC-SHA512\n    const hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA512, secret_buffer);\n    hmac.update(hash, secret_buffer);\n    \n    // step 4: Base64-encode the result of step 3\n    let result = hmac.finalize().toString(CryptoJS.enc.Base64);\n    return result;\n}*/\n"],"names":["$gDbIF","parcelRequire","$72efdde1217ffecd$var$Node","data","this","left","right","red","$72efdde1217ffecd$var$RBTree","comparator","_root","_comparator","size","$72efdde1217ffecd$var$is_red","node","$72efdde1217ffecd$var$single_rotate","root","dir","save","get_child","set_child","$72efdde1217ffecd$var$double_rotate","prototype","val","insert","ret","head","undefined","last","gp","ggp","p","dir2","cmp","remove","found","sr","sibling","gpc","module","exports","$c1b9611bd258da80$var$TreeBase","$c1b9611bd258da80$var$Iterator","tree","_tree","_ancestors","_cursor","clear","find","res","c","findIter","iter","iterator","push","lowerBound","item","cur","i","length","upperBound","next","min","max","each","cb","it","reach","prev","_minNode","pop","_maxNode","start","$8f0eb4f46279b9ac$var$Node","$8f0eb4f46279b9ac$var$BinTree","RBTree","BinTree","ws","WebSocket","$3fba0bda95caa784$var$chartBids","document","getElementById","$3fba0bda95caa784$var$chartAsks","$3fba0bda95caa784$var$asks","$3fba0bda95caa784$require$BST","a","b","key","$3fba0bda95caa784$var$bids","$3fba0bda95caa784$var$update_book","side","Object","values","parseFloat","value","$3fba0bda95caa784$var$sort","onopen","console","log","setTimeout","request_messageTwo","event","feed","product_ids","send","JSON","stringify","onmessage","message","parse","arrasks","arrbids","forEach","askitem","price1","vol","biditem","price2","chartbids","Chart","type","labels","$3fba0bda95caa784$var$toDisplayPrice","datasets","label","$3fba0bda95caa784$var$toDisaplyVolume","borderWidth","backgroundColor","options","normalized","animation","duration","y","ticks","stepSize","chartasks","$3fba0bda95caa784$var$price","$3fba0bda95caa784$var$volume","Math","floor","added","update"],"version":3,"file":"index.2783afb3.js.map"}